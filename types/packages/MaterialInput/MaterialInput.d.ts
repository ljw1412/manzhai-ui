import { CreateElement } from 'vue';
import MzSize from 'manzhai-ui/src/mixins/MzSize';
import FormElement from 'manzhai-ui/src/mixins/FormElement';
declare const MzMaterialInput_base: import("vue-class-component/lib/declarations").VueClass<MzSize & FormElement>;
export default class MzMaterialInput extends MzMaterialInput_base {
    readonly value: string | number;
    readonly type: string;
    readonly readonly: boolean;
    readonly placeholder: string;
    readonly autocomplete: 'on' | 'off';
    readonly showWordCount: boolean;
    readonly outlined: boolean;
    readonly error: boolean;
    readonly prependIcon: string;
    readonly prependSrc: string;
    readonly appendIcon: string;
    readonly appendSrc: string;
    readonly errorMessage: string;
    readonly maxlength: string | number;
    readonly hint: string;
    readonly rule: object;
    readonly labelUp: boolean;
    readonly isFocus: boolean;
    readonly inputRef: HTMLInputElement;
    readonly labelRef: HTMLElement;
    focus: boolean;
    isComposing: boolean;
    notchWidth: number;
    get inputFocus(): boolean;
    get mzInputClasses(): (string | {
        'mz-material-input--error': boolean;
        'mz-material-input--outlined': boolean;
        'mz-material-input--label-up': string | true;
        'mz-material-input--focused': boolean;
        'mz-material-input--empty': boolean;
        'mz-material-input--prepend': string;
        'mz-material-input--append': string;
    })[];
    get count(): number;
    get countStr(): string | number;
    renderInput(): JSX.Element;
    renderIcon(type: string, icon?: string, src?: string): JSX.Element | null;
    renderLine(): JSX.Element;
    renderContainer(): JSX.Element;
    renderHelper(): JSX.Element;
    render(h: CreateElement): JSX.Element;
    getNotchWidth(): void;
    onCompositionstart(event: CompositionEvent): void;
    onCompositionUpdate(event: CompositionEvent): void;
    onCompositionEnd(event: CompositionEvent): void;
    onInput(event: InputEvent | CompositionEvent): void;
    onFocus(event: InputEvent): void;
    onBlur(event: InputEvent): void;
    onChange(event: InputEvent): void;
    mounted(): void;
}
export {};
