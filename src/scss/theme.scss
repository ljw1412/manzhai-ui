@import '../styles/theme/base.scss';

// 获得不同亮度的颜色
// $name 颜色名称
// $color 颜色值
@function getBrightnessColor($name, $color, $mode: 'light') {
  $map: ();
  $brightness-map: (#ffffff, #000000);
  @if ($mode == 'dark') {
    $brightness-map: (#000000, #ffffff);
  }

  @for $i from 1 through 9 {
    $map: map-merge(
      $map,
      (#{$name}-#{$i}: mix(nth($brightness-map, 1), $color, (100% - 10% * $i)))
    );
  }
  $map: map-merge($map, (#{$name}-10: $color));
  @for $i from 11 through 19 {
    $map: map-merge(
      $map,
      (#{$name}-#{$i}: mix(nth($brightness-map, 2), $color, 10% * ($i - 10)))
    );
  }
  @return $map;
}

// 初始化颜色颜色
// $colors 颜色列表
// $merge-default 是否与默认颜色列表合并
// $brightness-colors 进行对比度处理
@function initColors(
  $colors: (),
  $merge-default: false,
  $brightness-colors: (
    'primary',
    'text-primary'
  ),
  $mode: 'light'
) {
  @if $merge-default {
    $colors: map-merge($base-colors, $colors);
  }

  // 如果颜色列表中有 primary 生成明暗(1-9)度不同的主色
  @each $name in $brightness-colors {
    @if map-has-key($colors, $name) {
      $colors: map-merge(
        $colors,
        getBrightnessColor($name, map-get($colors, $name), $mode)
      );
    }
  }
  @return $colors;
}

// 生成颜色 css variable
@mixin mzThemeColorVariable($colors) {
  @each $name, $color in $colors {
    --color-#{$name}: #{$color};
  }
}
